package project.beta;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import project.beta.model.EventsActivities;
import project.beta.model.NeuroHistory;

import com.google.appengine.api.users.User;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;

@SuppressWarnings("serial")
public class EvActServlet extends HttpServlet {
	public void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws IOException, ServletException {
		UserService userService = UserServiceFactory.getUserService();
		User user = userService.getCurrentUser();
		System.out.println("User name: " + user.getNickname());
		System.out.println("User id: " + user.getUserId());
		System.out.println("User email: " + user.getEmail());
		
		//TODO: Put in User Store and Patient Store stuff
		
		EventsActivities ea = new EventsActivities(0);
		BuildEvAct(ea, req);
		
		//Add Concerns to Patient then update patient on system
		
		RequestDispatcher view = req.getRequestDispatcher("/jsp/events_activities.jsp");
		view.forward(req, resp);
	}
	
	private void BuildEvAct(EventsActivities ea, HttpServletRequest req)
	{
		String[] times = req.getParameterValues("time_frame");
		int time_i = 0;
		
		String divorceCheck = req.getParameter("divorce_check");
		if(divorceCheck != "" && divorceCheck != null) {
			ea.setDivorce(divorceCheck.equalsIgnoreCase("on") ? true : false);
			if(ea.isDivorce()){
				ea.setDivorce_time(times[time_i]);
				ea.setDivorce_notes(req.getParameter("divorce_notes"));
				time_i++;
			}
		}
		
		String bereavementCheck = req.getParameter("bereavement_check");
		if(bereavementCheck != "" && bereavementCheck != null) {
			ea.setBereavement(bereavementCheck.equalsIgnoreCase("on") ? true : false);
			if(ea.isBereavement()){
				ea.setBereavement_time(times[time_i]);
				ea.setBereavement_notes(req.getParameter("bereavement_notes"));
				time_i++;
			}
		}
		
		String moving_houseCheck = req.getParameter("moving_house_check");
		if(moving_houseCheck != "" && moving_houseCheck != null) {
			ea.setMoving_house(moving_houseCheck.equalsIgnoreCase("on") ? true : false);
			if(ea.isMoving_house()){
				ea.setMoving_house_time(times[time_i]);
				ea.setMoving_house_notes(req.getParameter("moving_house_notes"));
				time_i++;
			}
		}
		
		String divorceCheck = req.getParameter("divorce_check");
		if(divorceCheck != "" && divorceCheck != null) {
			ea.setDivorce(divorceCheck.equalsIgnoreCase("on") ? true : false);
			if(ea.isDivorce()){
				ea.setDivorce_time(times[time_i]);
				ea.setDivorce_notes(req.getParameter("divorce_notes"));
				time_i++;
			}
		}
		
		String divorceCheck = req.getParameter("divorce_check");
		if(divorceCheck != "" && divorceCheck != null) {
			ea.setDivorce(divorceCheck.equalsIgnoreCase("on") ? true : false);
			if(ea.isDivorce()){
				ea.setDivorce_time(times[time_i]);
				ea.setDivorce_notes(req.getParameter("divorce_notes"));
				time_i++;
			}
		}
		
		String divorceCheck = req.getParameter("divorce_check");
		if(divorceCheck != "" && divorceCheck != null) {
			ea.setDivorce(divorceCheck.equalsIgnoreCase("on") ? true : false);
			if(ea.isDivorce()){
				ea.setDivorce_time(times[time_i]);
				ea.setDivorce_notes(req.getParameter("divorce_notes"));
				time_i++;
			}
		}
		
		String divorceCheck = req.getParameter("divorce_check");
		if(divorceCheck != "" && divorceCheck != null) {
			ea.setDivorce(divorceCheck.equalsIgnoreCase("on") ? true : false);
			if(ea.isDivorce()){
				ea.setDivorce_time(times[time_i]);
				ea.setDivorce_notes(req.getParameter("divorce_notes"));
				time_i++;
			}
		}
		
		String divorceCheck = req.getParameter("divorce_check");
		if(divorceCheck != "" && divorceCheck != null) {
			ea.setDivorce(divorceCheck.equalsIgnoreCase("on") ? true : false);
			if(ea.isDivorce()){
				ea.setDivorce_time(times[time_i]);
				ea.setDivorce_notes(req.getParameter("divorce_notes"));
				time_i++;
			}
		}
		
		String divorceCheck = req.getParameter("divorce_check");
		if(divorceCheck != "" && divorceCheck != null) {
			ea.setDivorce(divorceCheck.equalsIgnoreCase("on") ? true : false);
			if(ea.isDivorce()){
				ea.setDivorce_time(times[time_i]);
				ea.setDivorce_notes(req.getParameter("divorce_notes"));
				time_i++;
			}
		}
		
		String divorceCheck = req.getParameter("divorce_check");
		if(divorceCheck != "" && divorceCheck != null) {
			ea.setDivorce(divorceCheck.equalsIgnoreCase("on") ? true : false);
			if(ea.isDivorce()){
				ea.setDivorce_time(times[time_i]);
				ea.setDivorce_notes(req.getParameter("divorce_notes"));
				time_i++;
			}
		}
	}
}
