package webrtc.eval.model;

import java.util.ArrayList;
import java.util.Iterator;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;

import com.google.appengine.api.datastore.Key;

@Entity
public class PeerData {	

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	
	@OneToMany(fetch=FetchType.EAGER, cascade = CascadeType.ALL)
	private ArrayList<Clinic> clinics;
	
	public PeerData(){
		clinics = new ArrayList<Clinic>();
	}
		
	public long getID(){
		return id;
	}
	
	public void setID(long id){
		this.id = id; 
	}
	
	public ArrayList<Clinic> getClinics(){
		return clinics;
	}
	
	public Clinic getClinic(Key id){
		Iterator<Clinic> it = clinics.iterator();
		while(it.hasNext()){
			Clinic c = it.next();
			if(c.getClinicID().getId() == id.getId()){
				return c;
			}
		}
		return null;
	}
	
	public Clinic getClinic(String name){
		Iterator<Clinic> it = clinics.iterator();
		while(it.hasNext()){
			Clinic c = it.next();
			if(c.getName().equals(name)){
				return c;
			}
		}
		return null;
	}
	
	public boolean addClinic(Clinic c){
		return clinics.add(c);
	}
	
	public boolean removeClinic(Clinic c){
		return clinics.remove(c);
	}
	
	public boolean addClinician(Client client, String clinic){
		Clinic c = getClinic(clinic);
		return c.addClient(client);
	}
	
	public boolean removeClinician(Client client, String clinic){
		Clinic c = getClinic(clinic);
		return c.removeClient(client);
	}
	
	public Client findClinician(String name, String clinic){
		Clinic c = getClinic(clinic);
		return c.findClient(name);
	}
	
	public Client findClinician(Key id, String clinic){
		Clinic c = getClinic(clinic);
		return c.findClient(id);
	}
	
	public Client findClinician(String name){
		Client client = null;
		Iterator<Clinic> it = clinics.iterator();
		while(it.hasNext()){
			Clinic c = it.next();
			client = findClinician(name, c.getName());
			if(client != null)
				return client;
		}
		return null;
	}
	
	public Client findClinician(int id){
		Client client = null;
		Iterator<Clinic> it = clinics.iterator();
		while(it.hasNext()){
			Clinic c = it.next();
			client = findClinician(id, c.getName());
			if(client != null)
				return client;
		}
		return null;
	}
}
