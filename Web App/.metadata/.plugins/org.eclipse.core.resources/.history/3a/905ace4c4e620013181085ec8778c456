package project.beta;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import project.beta.model.Activity;
import project.beta.model.Lifestyle;

import com.google.appengine.api.users.User;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;

@SuppressWarnings("serial")
public class LifestyleServlet extends HttpServlet {
	public void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws IOException, ServletException {
		UserService userService = UserServiceFactory.getUserService();
		User user = userService.getCurrentUser();
		System.out.println("User name: " + user.getNickname());
		System.out.println("User id: " + user.getUserId());
		System.out.println("User email: " + user.getEmail());
		
		//TODO: Put in User Store and Patient Store stuff
		
		Lifestyle l = new Lifestyle(0);
		BuildLifestyle(l, req);
		
		//Add Concerns to Patient then update patient on system
		
		RequestDispatcher view = req.getRequestDispatcher("/jsp/events_activities.jsp");
		view.forward(req, resp);
	}
	
	private void BuildLifestyle(Lifestyle l, HttpServletRequest req)
	{
		l.setSleep_length(req.getParameter("sleep_length"));
		String difficulty_check = req.getParameter("difficulty_sleep_check");
		if(difficulty_check.equalsIgnoreCase("on")) {
			l.setDifficulty_sleep(true);
			l.setDifficulty_reason(req.getParameter("difficulty_reason"));
			l.setDifficulty_reason_notes(req.getParameter("difficulty_reason_notes"));
			l.setDifficulty_time(req.getParameter("difficulty_time"));
			l.setDifficulty_time_notes(req.getParameter("difficulty_time_notes"));
			l.setDifficulty_freq(req.getParameter("difficulty_freq"));
			l.setDifficulty_freq_notes(req.getParameter("difficulty_freq_notes"));
		}
		l.setDifficulty_sleep_notes(req.getParameter("difficulty_sleep_notes"));
		
		String night_waking_check = req.getParameter("night_waking_check");
		if(night_waking_check.equalsIgnoreCase("on")) {
			l.setNight_waking(true);
			l.setNight_waking_reason(req.getParameter("night_waking_reason"));
			l.setNight_waking_reason_notes(req.getParameter("night_waking_reason_notes"));
			l.setNight_waking_time(req.getParameter("night_waking_time"));
			l.setNight_waking_time_notes(req.getParameter("night_waking_time_notes"));
			l.setNight_waking_freq(req.getParameter("night_waking_freq"));
			l.setNight_waking_freq_notes(req.getParameter("night_waking_freq_notes"));
		}
		l.setNight_waking_notes(req.getParameter("night_waking_notes"));
		
		String early_waking_check = req.getParameter("early_waking_check");
		if(early_waking_check.equalsIgnoreCase("on")) {
			l.setEarly_waking(true);
			l.setEarly_waking_reason(req.getParameter("early_waking_reason"));
			l.setEarly_waking_reason_notes(req.getParameter("early_waking_reason_notes"));
			l.setEarly_waking_time(req.getParameter("early_waking_time"));
			l.setEarly_waking_time_notes(req.getParameter("early_waking_time_notes"));
			l.setEarly_waking_freq(req.getParameter("early_waking_freq"));
			l.setEarly_waking_freq_notes(req.getParameter("early_waking_freq_notes"));
		}
		l.setEarly_waking_notes(req.getParameter("early_waking_notes"));
		
		String meds_check = req.getParameter("meds_check");
		if(meds_check.equalsIgnoreCase("on")) {
			l.setMeds_check(true);
			l.setSleep_meds(req.getParameter("sleep_meds"));
			l.setSleep_med_notes(req.getParameter("sleep_meds_notes"));
		}
		
		String nap_check = req.getParameter("nap_check");
		if(nap_check.equalsIgnoreCase("on")) {
			l.setNap_check(true);
			l.setNap_length(req.getParameter("nap_length"));
			l.setNap_time(req.getParameter("nap_time"));
			l.setNap_notes(req.getParameter("nap_notes"));
		}
		
		String sleep_collat = req.getParameter("sleep_collat");
		if(sleep_collat.equalsIgnoreCase("shown")) {
			l.setCollat_sleep(true);
			
			l.setSleep_length_collat(req.getParameter("sleep_length"));
			String difficulty_check_collat = req.getParameter("difficulty_sleep_check_collat");
			if(difficulty_check_collat.equalsIgnoreCase("on")) {
				l.setDifficulty_sleep(true);
				l.setDifficulty_reason_collat(req.getParameter("difficulty_reason"));
				l.setDifficulty_reason_notes_collat(req.getParameter("difficulty_reason_notes"));
				l.setDifficulty_time_collat(req.getParameter("difficulty_time"));
				l.setDifficulty_time_notes_collat(req.getParameter("difficulty_time_notes"));
				l.setDifficulty_freq_collat(req.getParameter("difficulty_freq"));
				l.setDifficulty_freq_notes_collat(req.getParameter("difficulty_freq_notes"));
			}
			l.setDifficulty_sleep_notes_collat(req.getParameter("difficulty_sleep_notes"));
			
			String night_waking_check_collat = req.getParameter("night_waking_check_collat");
			if(night_waking_check_collat.equalsIgnoreCase("on")) {
				l.setNight_waking(true);
				l.setNight_waking_reason_collat(req.getParameter("night_waking_reason"));
				l.setNight_waking_reason_notes_collat(req.getParameter("night_waking_reason_notes"));
				l.setNight_waking_time_collat(req.getParameter("night_waking_time"));
				l.setNight_waking_time_notes_collat(req.getParameter("night_waking_time_notes"));
				l.setNight_waking_freq_collat(req.getParameter("night_waking_freq"));
				l.setNight_waking_freq_notes_collat(req.getParameter("night_waking_freq_notes"));
			}
			l.setNight_waking_notes_collat(req.getParameter("night_waking_notes"));
			
			String early_waking_check_collat = req.getParameter("early_waking_check_collat");
			if(early_waking_check_collat.equalsIgnoreCase("on")) {
				l.setEarly_waking(true);
				l.setEarly_waking_reason_collat(req.getParameter("early_waking_reason"));
				l.setEarly_waking_reason_notes_collat(req.getParameter("early_waking_reason_notes"));
				l.setEarly_waking_time_collat(req.getParameter("early_waking_time"));
				l.setEarly_waking_time_notes_collat(req.getParameter("early_waking_time_notes"));
				l.setEarly_waking_freq_collat(req.getParameter("early_waking_freq"));
				l.setEarly_waking_freq_notes_collat(req.getParameter("early_waking_freq_notes"));
			}
			l.setEarly_waking_notes_collat(req.getParameter("early_waking_notes"));
			
			String meds_check_collat = req.getParameter("meds_check_collat");
			if(meds_check_collat.equalsIgnoreCase("on")) {
				l.setMeds_check_collat(true);
				l.setSleep_meds_collat(req.getParameter("sleep_meds"));
				l.setSleep_med_notes_collat(req.getParameter("sleep_meds_notes"));
			}
			
			String nap_check_collat = req.getParameter("nap_check_collat");
			if(nap_check_collat.equalsIgnoreCase("on")) {
				l.setNap_check_collat(true);
				l.setNap_length_collat(req.getParameter("nap_length"));
				l.setNap_time_collat(req.getParameter("nap_time"));
				l.setNap_notes_collat(req.getParameter("nap_notes"));
			}
		}
		
		//Exercise
		String[] activities = req.getParameterValues("activities_list");
		String[] involvements = req.getParameterValues("still_active_check");
		String[] current_hours = req.getParameterValues("current_active_hours");
		String[] previous_hours = req.getParameterValues("previous_active_hours");
		String[] exercise_time = req.getParameterValues("exercise_time");
		String[] activity_notes = req.getParameterValues("activity_notes");
		
		int current_i = 0, previous_i = 0, time_i = 0, notes_i = 0;
		for(int i = 0; i < activities.length; i++)
		{
			Activity a = new Activity(activities[i], involvements[i]);
			String involve = involvements[i];
			if(involve.equalsIgnoreCase("no")){
				a.setPrev_hours(Integer.parseInt(previous_hours[previous_i]));
				previous_i++;
				a.setTime_changed(exercise_time[time_i]);
				time_i++;
				a.setNotes(activity_notes[notes_i]);
				notes_i++;
			} else if(involve.equalsIgnoreCase("ongoing")) {
				a.setCurrent_hours(Integer.parseInt(current_hours[current_i]));
				current_i++;
			} else if(involve.equalsIgnoreCase("decrease")) {
				a.setCurrent_hours(Integer.parseInt(current_hours[current_i]));
				current_i++;
				a.setPrev_hours(Integer.parseInt(previous_hours[previous_i]));
				previous_i++;
				a.setTime_changed(exercise_time[time_i]);
				time_i++;
				a.setNotes(activity_notes[notes_i]);
				notes_i++;
			}
			l.addActivity(a);
		}
		
		//Exercise Collat
		String exercise_collat = req.getParameter("exercise_collat");
		if(exercise_collat.equalsIgnoreCase("shown"))
		{
			l.setCollat_exercise(true);
			String[] activities_collat = req.getParameterValues("activities_list_collat");
			String[] involvements_collat = req.getParameterValues("still_active_check_collat");
			String[] current_hours_collat = req.getParameterValues("current_active_hours_collat");
			String[] previous_hours_collat = req.getParameterValues("previous_active_hours_collat");
			String[] exercise_time_collat = req.getParameterValues("exercise_time_collat");
			String[] activity_notes_collat = req.getParameterValues("activity_notes_collat");
			
			current_i = 0; previous_i = 0; time_i = 0; notes_i = 0;
			for(int i = 0; i < activities_collat.length; i++)
			{
				Activity a = new Activity(activities_collat[i], involvements_collat[i]);
				String involve = involvements_collat[i];
				if(involve.equalsIgnoreCase("no")){
					a.setPrev_hours(Integer.parseInt(previous_hours_collat[previous_i]));
					previous_i++;
					a.setTime_changed(exercise_time_collat[time_i]);
					time_i++;
					a.setNotes(activity_notes_collat[notes_i]);
					notes_i++;
				} else if(involve.equalsIgnoreCase("ongoing")) {
					a.setCurrent_hours(Integer.parseInt(current_hours_collat[current_i]));
					current_i++;
				} else if(involve.equalsIgnoreCase("decrease")) {
					a.setCurrent_hours(Integer.parseInt(current_hours_collat[current_i]));
					current_i++;
					a.setPrev_hours(Integer.parseInt(previous_hours_collat[previous_i]));
					previous_i++;
					a.setTime_changed(exercise_time_collat[time_i]);
					time_i++;
					a.setNotes(activity_notes_collat[notes_i]);
					notes_i++;
				}
				l.addCollatActivity(a);
			}			
			
		}
		
		//Diet
		l.setBreakfast(req.getParameter("diet_breakfast_notes"));
		l.setLunch("diet_lunch_notes");
		l.setDinner("diet_dinner_notes");
		
		String miss_meals = req.getParameter("miss_meals_check");
		if(miss_meals.equalsIgnoreCase("on")){
			l.setMiss_meals(true);
			l.setMiss_meals_freq(req.getParameter("miss_meals_freq"));
		}
		
		String sweets = req.getParameter("sweets_check");
		if(sweets.equalsIgnoreCase("on")){
			l.setSweets(true);
			l.setSweets_freq(req.getParameter("sweets_freq"));
		}
		
		String fried = req.getParameter("fried_check");
		if(fried.equalsIgnoreCase("on")){
			l.setFried(true);
			l.setFried_freq(req.getParameter("fried_freq"));
		}
		
		String takeaway = req.getParameter("takeaway_check");
		if(takeaway.equalsIgnoreCase("on")){
			l.setTakeaway(true);
			l.setTakeaway_freq(req.getParameter("takeaway_freq"));
		}
		
		String cakes = req.getParameter("cakes_check");
		if(cakes.equalsIgnoreCase("on")){
			l.setCakes(true);
			l.setCakes_freq(req.getParameter("cakes_freq"));
		}
		
		l.setFruit_veg_amount(req.getParameter("fruit_veg_amount"));
	}
}
