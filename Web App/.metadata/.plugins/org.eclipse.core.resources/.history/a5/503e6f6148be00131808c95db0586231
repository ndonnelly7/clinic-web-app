/**
 * 
 */

var db;

function Patient(name, address, number, email, gp_name, gp_address, p_id){
	this.name = name;
	this.address = address;
	this.number = number;
	this.email = email;
	this.gp_name = gp_name;
	this.gp_address = gp_address;
	this.p_id = p_id;
}

function IDBInit() {
	if(!window.indexedDB) {
		console.log("IndexedDB not available");
		return;
	}
	
	openRequest = indexedDB.open("clinicDB",1);
	
	openRequest.onupgradeneeded = function(e){
		db = e.target.result;
		
		if(!db.objectStoreNames.contains("patients")) {
			var store = db.createObjectStore("patients", {keyPath: "p_id"});
			store.createIndex("name", "name", {unique:false});
		}
	}
	
	openRequest.onsuccess = function(e) {
		db = e.target.result;
	}
	
	openRequest.onerror = function(e) {
		console.error("Error setting up IndexedDB");
	}
	
	openRequest.onblock = function(e) {
		console.error("Blocked somehow");
	}
}

function clearObjectStore() {
	if(db) {
		var transaction = db.transaction(["patients"],"readwrite");
		var objectStore = transaction.objectStore("patients");
		var request = objectStore.clear();
	}
}

function addPatientToDB(p){
	
}

function createPatientAndAddToDB(name, address, number, email, gp_name, gp_address){
	
}

function updatePatient(p_id, p){
	
}

function getPatient(p_id){
	
}

function showPatient(p){
	
}

function removePatient(p_id){
	
}

function getPatientKeys(){
	
}

function createID(name, dob){
	var hash = 0;
	var str = name + dob;
	if(str == ""){
		return hash;
	}
	for(var i = 0; i < str.length; i++){
		var char = str.charAt(i);
		hash = ((hash << 5) - hash) + char;
		hash |= 0;
	}
	return hash;
}