package webrtc.eval.controller;

import java.io.IOException;
import java.util.ArrayList;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import webrtc.eval.model.Client;
import webrtc.eval.model.Clinic;
import webrtc.eval.model.Patient;
import webrtc.eval.model.PatientDataAccess;
import webrtc.eval.model.PeerDataAccess;

import com.google.appengine.api.channel.ChannelMessage;
import com.google.appengine.api.channel.ChannelService;
import com.google.appengine.api.channel.ChannelServiceFactory;
import com.google.gson.Gson;

@SuppressWarnings("serial")
public class WebRTCEvalServlet extends HttpServlet {
	public void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws IOException {
		/*
		 * Request requirements: 
		 * Request type - ClinicsList, ClientsFromClinic, Synch, Retrieve, FindPatient, FindClient
		 */
		
		String type = req.getParameter("type");
		
		switch(type) {
		case "ClinicsList" :
			String clinics = getClinicsList();
			resp.setContentType("application/json");
			resp.setCharacterEncoding("UTF-8");
			resp.getWriter().write(clinics);
			break;
		case "ClientsFromClinic" :
			String clients = getClientsFromClinic(req.getParameter("clinic"));
			resp.setContentType("application/json");
			resp.setCharacterEncoding("UTF-8");
			resp.getWriter().write(clients);
			break;
		case "ChannelCheck":
			System.out.println("ChannelCheck entered");
			String clinic = req.getParameter("clinic");
			String name = req.getParameter("user");
			
			resp.setContentType("text/plain");
			resp.getWriter().println(sendChannelPing(clinic,name));
			break;
		case "AddPatient":
			System.out.println("Adding Patient");
			String pPPSN = req.getParameter("ppsn");
			String cName = req.getParameter("client");
			String cClinic = req.getParameter("clinic");
			
			resp.setContentType("text/plain");
			resp.getWriter().println(addPatient(pPPSN, cName, cClinic));
			//TODO: Need to add the synch stuff here as well
			break;
		default:
			resp.setContentType("text/plain");
			resp.getWriter().println("Unkown Command");
		}
	}
	
	public void doPut(HttpServletRequest req, HttpServletResponse resp)
			throws IOException {
		/*
		 * Request requirements: 
		 * Request type - AddPatient
		 */
		
		
	}
	
	public String addPatient(String ppsn, String clientName, String clinicName){
		PeerDataAccess pd = new PeerDataAccess();
		Client c = pd.findClinicianInClinic(clientName, clinicName);
		if(c==null){
			return "Couldn't find client with name " + clientName + " in clinic";
		}
		Patient p = new Patient(ppsn, c, c.getcClinic().getClinicID());
		PatientDataAccess patD = new PatientDataAccess();
		patD.init();
		if(!patD.addPatient(p)){
			return "Couldn't add patient with ppsn " + ppsn;
		}
		
		p = patD.findPatient(ppsn);
		if(p == null)
			return "Patient not added correctly";
		
		if(!pd.addPatientKey(p.getKey(), clientName, clinicName))
			return "Patient couldn't be added to clinic or client";
		
		return "Success";
	}
	
	//Returns a list of the clinic names in a JSON object
	public String getClinicsList(){
		PeerDataAccess pd = new PeerDataAccess();
		pd.init();
		ArrayList<Clinic> clinics = pd.getClinics();
		ArrayList<String> clinic_names = new ArrayList<String>();
		for(int i = 0; i < clinics.size(); i++){
			clinic_names.add(clinics.get(i).getName());
		}
		
		Gson gson = new Gson();
		String json = gson.toJson(clinic_names);
		return json;
	}
	
	public String getClientsFromClinic(String clinic_name) {
		PeerDataAccess pd = new PeerDataAccess();
		pd.init();
		
		Clinic c = pd.findClinic(clinic_name);
		if(c == null)
			return "";
		
		ArrayList<Client> clients = c.getClients();
		
		if(clients.size() <= 0)
			return "";
		
		ArrayList<String> client_names = new ArrayList<String>();
		for(int i = 0; i < clients.size(); i++){
			client_names.add(clients.get(i).getcName());
		}
		
		Gson gson = new Gson();
		String json = gson.toJson(client_names);
		return json;
	}
	
	public String sendChannelPing(String clinic, String client){
		ChannelService channelService = ChannelServiceFactory.getChannelService();
		
		PeerDataAccess pd = new PeerDataAccess();
		pd.init();
		Client c = pd.findClinicianInClinic(client, clinic);
		if(c == null)
			return "Couldn't find";
		
		channelService.sendMessage(new ChannelMessage(Long.toString(c.getcID().getId()), "Ping: Sent at " + System.currentTimeMillis()));
		
		return "Success";
	}
}
